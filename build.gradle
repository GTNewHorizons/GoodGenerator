import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        //Defaults to Java 8 & UTF-8 encoding
        classpath "com.github.GTNewHorizons:ForgeGradle:1.2.4"
    }
}

plugins {
  // project.grgit is not available and the repository we're working in is not 
  // interacted with: 
  //id 'org.ajoberstar.grgit' version '4.0.2' apply false
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'java-library'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
}

sourceCompatibility = targetCompatibility = 1.8

version = modVersion
group= modGroup
archivesBaseName = modId

minecraft {
    version = "${minecraftVersion}-${forgeVersion}-${minecraftVersion}"
    runDir = "run"
}

repositories {
    jcenter()
    maven { // EnderIO & EnderCore
        name = 'tterrag Repo'
        url = "http://maven.tterrag.com"
    }
    maven {
        name = "CodeChicken"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "ic2"
        url = "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/"
    }
    ivy {
        name = "gtnh_download_source"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
    maven {
        name = "UsrvDE/GTNH"
        url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        name = "cofhCore"
        url = "https://cursemaven.com"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        url = "http://www.ryanliptak.com/maven/"
    }
}

dependencies {
    compile("com.github.GTNewHorizons:GT5-Unofficial:master-SNAPSHOT:dev")
    compileOnly("com.github.GTNewHorizons:EnderCore:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:bartworks:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:Baubles:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:GTplusplus:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:AppleCore:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:TecTech:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:ForestryMC:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:Railcraft:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:EnderIO:master-SNAPSHOT:dev") {
        transitive = false
    }
    compileOnly("com.mod-buildcraft:buildcraft:7.1.23:dev") {
        transitive = false
    }
    compileOnly("com.github.GTNewHorizons:ExtraCells2:master-SNAPSHOT:dev") {
        transitive = false
    }
/*    compileOnly("com.github.GTNewHorizons:Avaritia:master-SNAPSHOT") {
        setChanging(true)
    }*/
    compile files('Thaumcraft-1.7.10-4.2.3.5.deobf.jar')
}


processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(devJar)
    archives(sourcesJar)
}
